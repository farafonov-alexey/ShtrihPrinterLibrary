<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 2.3.3">

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use `BuildConfig.DEBUG` conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Assertions"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.&#xA;&#xA;For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.&#xA;&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="        assert neededFor(var0);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\encoding\Surrogate.java"
            line="41"
            column="9"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use `BuildConfig.DEBUG` conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Assertions"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.&#xA;&#xA;For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.&#xA;&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="        assert neededFor(var0);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\encoding\Surrogate.java"
            line="47"
            column="9"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use `BuildConfig.DEBUG` conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Assertions"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.&#xA;&#xA;For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.&#xA;&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="        assert isHigh(var0) &amp;&amp; isLow(var1);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\encoding\Surrogate.java"
            line="53"
            column="9"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use `BuildConfig.DEBUG` conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Assertions"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.&#xA;&#xA;For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.&#xA;&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="            assert var2[var3] == var1;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\encoding\Surrogate.java"
            line="204"
            column="13"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="  if(OS.toLowerCase().indexOf(&quot;linux&quot;) == -1)"
        errorLine2="        ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\CommPortIdentifier.java"
            line="118"
            column="9"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            line = line.toUpperCase();"
        errorLine2="                        ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\table\CsvTablesReader.java"
            line="99"
            column="25"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            logger.debug(String.format(&quot;Starting FSService, OFD %s:%d, connection timeout %d ms, poll period %d ms&quot;,"
        errorLine2="                         ^">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\FSService.java"
            line="47"
            column="26"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return result.toUpperCase();"
        errorLine2="                      ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\Hex.java"
            line="246"
            column="23"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            logger.debug(prefix + (Hex.toHex(b, b.length)).toUpperCase());"
        errorLine2="                                                           ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\Logger2.java"
            line="54"
            column="60"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return String.format(&quot;%.016d&quot;, getSerialNumber());"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\LongPrinterStatus.java"
            line="178"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                        String.format(&quot;ControlTransfer with value 0x%x failed: %d&quot;,"
        errorLine2="                        ^">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="143"
            column="25"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                        String.format(&quot;ControlTransfer with value 0x%x failed: %d&quot;,"
        errorLine2="                        ^">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="156"
            column="25"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                                    String.format(&quot;Invalid CTS / DSR / CD / RI status buffer received, expected %d bytes, but received %d&quot;,"
        errorLine2="                                    ^">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="215"
            column="37"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="     String CU = C.substring(VL).toUpperCase();"
        errorLine2="                                 ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\RXTXCommDriver.java"
            line="256"
            column="34"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="     String Cl = C.substring(VL).toLowerCase();"
        errorLine2="                                 ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\RXTXCommDriver.java"
            line="257"
            column="34"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="     if (osName.toLowerCase().indexOf(&quot;windows&quot;) == -1) {"
        errorLine2="                ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\RXTXCommDriver.java"
            line="262"
            column="17"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="  } else if (osName.toLowerCase().indexOf(&quot;windows&quot;) != -1) {"
        errorLine2="                    ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\RXTXCommDriver.java"
            line="420"
            column="21"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="   } else if (osName.toLowerCase().indexOf(&quot;qnx&quot;) != -1) {"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\RXTXCommDriver.java"
            line="551"
            column="22"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="   } else if (osName.toLowerCase().indexOf(&quot;windows&quot;) != -1) {"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\RXTXCommDriver.java"
            line="642"
            column="22"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="   } else if (osName.toLowerCase().indexOf(&quot;windows&quot;) != -1) {"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\RXTXCommDriver.java"
            line="677"
            column="22"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="    if (osName.toLowerCase().indexOf(&quot;windows&quot;) == -1) {"
        errorLine2="               ~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\gnu\io\RXTXCommDriver.java"
            line="716"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            line2 = String.format(&quot;#%04d&quot;, status.getDocumentNumber());"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\SMFiscalPrinterImpl.java"
            line="3221"
            column="21"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            line2 = String.format(&quot;ИНН %010d&quot;, status.getFiscalID());"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\SMFiscalPrinterImpl.java"
            line="3225"
            column="21"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            add(docNames[receiptType], String.format(&quot;№%04d&quot;, recNumber));"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="216"
            column="40"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(String.format(&quot;%02d&quot;, item.getDepartment()), line);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="390"
            column="13"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return String.format(&quot;%d.%02d&quot;, value / 100, value % 100);"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="394"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return String.format(&quot;%d.%03d&quot;, value / 1000, value % 1000);"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="398"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            add(String.format(&quot;%02d&quot;, item.getDepartment()), line);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="436"
            column="17"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            add(String.format(&quot;%02d&quot;, item.getDepartment()), line);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="441"
            column="17"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            add(String.format(&quot;%02d&quot;, item.getDepartment()), line);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="454"
            column="17"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            add(String.format(&quot;%02d&quot;, item.getDepartment()), line);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="459"
            column="17"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return String.format(&quot;%04d&quot;, value);"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="644"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        String s2 = String.format(&quot;ИНН %s №%04d&quot;, status.getFiscalIDText(), documentNumber);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="705"
            column="21"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        String s = String.format(&quot;%02d.%02d.%02d %02d:%02d&quot;, date.getDay(), date.getMonth(), date.getYear(),"
        errorLine2="                   ^">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="710"
            column="20"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(SXReportText, String.format(&quot;№%04d&quot;, report.xReportNumber));"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="738"
            column="27"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(SZReportText, String.format(&quot;№%04d&quot;, report.zReportNumber));"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="749"
            column="27"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            add(ReceiptText[i], String.format(&quot;%04d&quot;, receipt.number));"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="768"
            column="33"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            add(String.format(&quot;%04d&quot;, receipt.count), receipt.total);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="769"
            column="17"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(&quot;ВНЕСЕНИЙ&quot;, String.format(&quot;%04d&quot;, report.cashIn.number));"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="775"
            column="25"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(String.format(&quot;%04d&quot;, report.cashIn.count), report.cashIn.total);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="776"
            column="13"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(&quot;ВЫПЛАТ&quot;, String.format(&quot;%04d&quot;, report.cashOut.number));"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="777"
            column="23"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(String.format(&quot;%04d&quot;, report.cashOut.count), report.cashOut.total);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="778"
            column="13"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(&quot;АННУЛИРОВАННЫХ ЧЕКОВ&quot;, String.format(&quot;%04d&quot;, report.voidCount));"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="779"
            column="37"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        add(String.format(&quot;%04d&quot;, report.dayVoidCount));"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="780"
            column="13"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            String line = String.format(&quot;%04d %s&quot;, report.voidedReceipts.get(i).count, voidedReceiptText[i]);"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="782"
            column="27"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="         add(String.format(&quot;ФД:%d ФП:%10d&quot;, documentNumber, fp));"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\TextDocumentFilter.java"
            line="857"
            column="14"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            throw new Exception(String.format(&quot;Смена № %d не найдена&quot;, dayNumber));"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\TextReportPrinter.java"
            line="40"
            column="33"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        String header = String.format(&quot;Контрольная лента Смена № %d&quot;, dayNumber);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\TextReportPrinter.java"
            line="43"
            column="25"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            throw new Exception(String.format(&quot;Документ № %d не найден&quot;, docNumber));"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\TextReportPrinter.java"
            line="51"
            column="33"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        String header = String.format(&quot;Контрольная лента Документ № %d&quot;, docNumber);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\TextReportPrinter.java"
            line="54"
            column="25"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            throw new Exception(String.format(&quot;Номер первого документа больше второго (%d > %d)&quot;, N1, N2));"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\TextReportPrinter.java"
            line="61"
            column="33"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        String header = String.format(&quot;Контрольная лента Документ с № %d по № %d&quot;, N1, N2);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\TextReportPrinter.java"
            line="70"
            column="25"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            throw new Exception(String.format(&quot;Смена № %d не найдена&quot;, dayNumber));"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\TextReportPrinter.java"
            line="90"
            column="33"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        String header = String.format(&quot;Контрольная лента Смена № %d&quot;, dayNumber);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\TextReportPrinter.java"
            line="93"
            column="25"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_TYPE_CLASS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="        private static final int USB_RT_ACM = UsbConstants.USB_TYPE_CLASS | USB_RECIP_INTERFACE;"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="84"
            column="47"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_DIR_IN`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="   final int REQTYPE_HOST_TO_DEVICE = UsbConstants.USB_TYPE_VENDOR | UsbConstants.USB_DIR_IN;"
        errorLine2="                                                                     ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="208"
            column="70"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_TYPE_VENDOR`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="   final int REQTYPE_HOST_TO_DEVICE = UsbConstants.USB_TYPE_VENDOR | UsbConstants.USB_DIR_IN;"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="208"
            column="39"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_TYPE_VENDOR`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="                UsbConstants.USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_ENDPOINT_OUT;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="170"
            column="17"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_TYPE_VENDOR`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="                UsbConstants.USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_ENDPOINT_IN;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="173"
            column="17"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.content.Context#USB_SERVICE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="            UsbManager usbManager = (UsbManager) getContext().getSystemService(Context.USB_SERVICE);"
        errorLine2="                                                                               ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="88"
            column="80"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_DIR_OUT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="        private static final int PROLIFIC_VENDOR_OUT_REQTYPE = UsbConstants.USB_DIR_OUT"
        errorLine2="                                                               ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="76"
            column="64"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_TYPE_VENDOR`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="                | UsbConstants.USB_TYPE_VENDOR;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="77"
            column="19"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_DIR_IN`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="        private static final int PROLIFIC_VENDOR_IN_REQTYPE = UsbConstants.USB_DIR_IN"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="79"
            column="63"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_TYPE_VENDOR`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="                | UsbConstants.USB_TYPE_VENDOR;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="80"
            column="19"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_DIR_OUT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="        private static final int PROLIFIC_CTRL_OUT_REQTYPE = UsbConstants.USB_DIR_OUT"
        errorLine2="                                                             ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="82"
            column="62"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 12 (current min is 10): `android.hardware.usb.UsbConstants#USB_TYPE_CLASS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;"
        errorLine1="                | UsbConstants.USB_TYPE_CLASS | USB_RECIP_INTERFACE;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="83"
            column="19"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.awt.geom`. Referenced from `org.jbarcode.JBarcode`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\jbarcode-0.2.8.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.awt.image`. Referenced from `com.keypoint.PngEncoder`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\jbarcode-0.2.8.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.awt`. Referenced from `com.keypoint.PngEncoder`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\jbarcode-0.2.8.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.imageio`. Referenced from `org.jbarcode.util.ImageUtil`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\jbarcode-0.2.8.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.lang.management`. Referenced from `org.junit.internal.runners.statements.FailOnTimeout`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\.gradle\caches\modules-2\files-2.1\junit\junit\4.12\2973d150c0dc1fefe998f834810d68f278ea58ec\junit-4.12.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.awt.event`. Referenced from `org.apache.log4j.chainsaw.Main.1`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\log4j-1.2.16.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.swing.event`. Referenced from `org.apache.log4j.chainsaw.DetailPanel`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\log4j-1.2.16.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.swing.table`. Referenced from `org.apache.log4j.chainsaw.ControlPanel`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\log4j-1.2.16.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.swing.text`. Referenced from `org.apache.log4j.chainsaw.ControlPanel`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\log4j-1.2.16.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.swing.tree`. Referenced from `org.apache.log4j.lf5.viewer.LogBrokerMonitor`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\log4j-1.2.16.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.swing`. Referenced from `org.apache.log4j.chainsaw.ControlPanel`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\lib\log4j-1.2.16.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.mail.internet`. Referenced from `ch.qos.logback.core.net.SMTPAppenderBase`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\.gradle\caches\modules-2\files-2.1\com.github.tony19\logback-android-core\1.1.1-6\93117015ae639e6482e4e1ad5f988c3f61d09fe0\logback-android-core-1.1.1-6.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.mail`. Referenced from `ch.qos.logback.core.net.LoginAuthenticator`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\mamba\.gradle\caches\modules-2\files-2.1\com.github.tony19\logback-android-core\1.1.1-6\93117015ae639e6482e4e1ad5f988c3f61d09fe0\logback-android-core-1.1.1-6.jar"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterfaceCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (1 == mDevice.getInterfaceCount()) {"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="111"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterfaceCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (1 == mDevice.getInterfaceCount()) {"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="111"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mControlInterface = mDevice.getInterface(0);"
        errorLine2="                                        ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="142"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mControlInterface = mDevice.getInterface(0);"
        errorLine2="                                        ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="142"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mDataInterface = mDevice.getInterface(0);"
        errorLine2="                                     ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="145"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mDataInterface = mDevice.getInterface(0);"
        errorLine2="                                     ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="145"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#claimInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (!mConnection.claimInterface(mControlInterface, true)) {"
        errorLine2="                             ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="148"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#claimInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (!mConnection.claimInterface(mControlInterface, true)) {"
        errorLine2="                             ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="148"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpointCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int endCount = mControlInterface.getEndpointCount();"
        errorLine2="                                             ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="152"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpointCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int endCount = mControlInterface.getEndpointCount();"
        errorLine2="                                             ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="152"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpointCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                Log.d(TAG,&quot;not enough endpoints - need 3. count=&quot; + mControlInterface.getEndpointCount());"
        errorLine2="                                                                                      ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="155"
            column="87"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpointCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                Log.d(TAG,&quot;not enough endpoints - need 3. count=&quot; + mControlInterface.getEndpointCount());"
        errorLine2="                                                                                      ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="155"
            column="87"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpointCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                throw new IOException(&quot;Insufficient number of endpoints(&quot; + mControlInterface.getEndpointCount() + &quot;)&quot;);"
        errorLine2="                                                                                              ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="156"
            column="95"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpointCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                throw new IOException(&quot;Insufficient number of endpoints(&quot; + mControlInterface.getEndpointCount() + &quot;)&quot;);"
        errorLine2="                                                                                              ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="156"
            column="95"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                UsbEndpoint ep = mControlInterface.getEndpoint(i);"
        errorLine2="                                                   ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="164"
            column="52"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                UsbEndpoint ep = mControlInterface.getEndpoint(i);"
        errorLine2="                                                   ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="164"
            column="52"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if ((ep.getDirection() == UsbConstants.USB_DIR_IN) &amp;&amp;"
        errorLine2="                        ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="165"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getDirection"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if ((ep.getDirection() == UsbConstants.USB_DIR_IN) &amp;&amp;"
        errorLine2="                        ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="165"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getType`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_INT)) {"
        errorLine2="                        ~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="166"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getType"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_INT)) {"
        errorLine2="                        ~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="166"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                } else if ((ep.getDirection() == UsbConstants.USB_DIR_IN) &amp;&amp;"
        errorLine2="                               ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="169"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getDirection"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                } else if ((ep.getDirection() == UsbConstants.USB_DIR_IN) &amp;&amp;"
        errorLine2="                               ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="169"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getType`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                           (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_BULK)) {"
        errorLine2="                               ~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="170"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getType"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                           (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_BULK)) {"
        errorLine2="                               ~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="170"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                } else if ((ep.getDirection() == UsbConstants.USB_DIR_OUT) &amp;&amp;"
        errorLine2="                               ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="173"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getDirection"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                } else if ((ep.getDirection() == UsbConstants.USB_DIR_OUT) &amp;&amp;"
        errorLine2="                               ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="173"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getType`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_BULK)) {"
        errorLine2="                            ~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="174"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getType"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_BULK)) {"
        errorLine2="                            ~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="174"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterfaceCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Log.d(TAG, &quot;claiming interfaces, count=&quot; + mDevice.getInterfaceCount());"
        errorLine2="                                                               ~~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="197"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterfaceCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Log.d(TAG, &quot;claiming interfaces, count=&quot; + mDevice.getInterfaceCount());"
        errorLine2="                                                               ~~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="197"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mControlInterface = mDevice.getInterface(0);"
        errorLine2="                                        ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="199"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mControlInterface = mDevice.getInterface(0);"
        errorLine2="                                        ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="199"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#claimInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (!mConnection.claimInterface(mControlInterface, true)) {"
        errorLine2="                             ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="203"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#claimInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (!mConnection.claimInterface(mControlInterface, true)) {"
        errorLine2="                             ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="203"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mControlEndpoint = mControlInterface.getEndpoint(0);"
        errorLine2="                                                 ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="207"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mControlEndpoint = mControlInterface.getEndpoint(0);"
        errorLine2="                                                 ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="207"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Log.d(TAG, &quot;Control endpoint direction: &quot; + mControlEndpoint.getDirection());"
        errorLine2="                                                                         ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="208"
            column="74"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getDirection"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Log.d(TAG, &quot;Control endpoint direction: &quot; + mControlEndpoint.getDirection());"
        errorLine2="                                                                         ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="208"
            column="74"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mDataInterface = mDevice.getInterface(1);"
        errorLine2="                                     ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="211"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mDataInterface = mDevice.getInterface(1);"
        errorLine2="                                     ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="211"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#claimInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (!mConnection.claimInterface(mDataInterface, true)) {"
        errorLine2="                             ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="215"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#claimInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (!mConnection.claimInterface(mDataInterface, true)) {"
        errorLine2="                             ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="215"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mReadEndpoint = mDataInterface.getEndpoint(1);"
        errorLine2="                                           ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="218"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mReadEndpoint = mDataInterface.getEndpoint(1);"
        errorLine2="                                           ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="218"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Log.d(TAG, &quot;Read endpoint direction: &quot; + mReadEndpoint.getDirection());"
        errorLine2="                                                                   ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="219"
            column="68"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getDirection"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Log.d(TAG, &quot;Read endpoint direction: &quot; + mReadEndpoint.getDirection());"
        errorLine2="                                                                   ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="219"
            column="68"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mWriteEndpoint = mDataInterface.getEndpoint(0);"
        errorLine2="                                            ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="220"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mWriteEndpoint = mDataInterface.getEndpoint(0);"
        errorLine2="                                            ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="220"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Log.d(TAG, &quot;Write endpoint direction: &quot; + mWriteEndpoint.getDirection());"
        errorLine2="                                                                     ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="221"
            column="70"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getDirection"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Log.d(TAG, &quot;Write endpoint direction: &quot; + mWriteEndpoint.getDirection());"
        errorLine2="                                                                     ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="221"
            column="70"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return mConnection.controlTransfer("
        errorLine2="                               ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="225"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return mConnection.controlTransfer("
        errorLine2="                               ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="225"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#close"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mConnection.close();"
        errorLine2="                        ~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="234"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `new android.hardware.usb.UsbRequest`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="              final UsbRequest request = new UsbRequest();"
        errorLine2="                    ~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="241"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): new android.hardware.usb.UsbRequest"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="              final UsbRequest request = new UsbRequest();"
        errorLine2="                                         ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="241"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbRequest#initialize`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                request.initialize(mConnection, mReadEndpoint);"
        errorLine2="                        ~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="243"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbRequest#initialize"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                request.initialize(mConnection, mReadEndpoint);"
        errorLine2="                        ~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="243"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbRequest#queue`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (!request.queue(buf, dest.length)) {"
        errorLine2="                             ~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="245"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbRequest#queue"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (!request.queue(buf, dest.length)) {"
        errorLine2="                             ~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="245"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#requestWait`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                final UsbRequest response = mConnection.requestWait();"
        errorLine2="                                                        ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="249"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#requestWait"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                final UsbRequest response = mConnection.requestWait();"
        errorLine2="                                                        ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="249"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbRequest#close"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                request.close();"
        errorLine2="                        ~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="262"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                numBytesRead = mConnection.bulkTransfer(mReadEndpoint, mReadBuffer, readAmt,"
        errorLine2="                                           ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="269"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                numBytesRead = mConnection.bulkTransfer(mReadEndpoint, mReadBuffer, readAmt,"
        errorLine2="                                           ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="269"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    amtWritten = mConnection.bulkTransfer(mWriteEndpoint, writeBuffer, writeLength,"
        errorLine2="                                             ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="308"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    amtWritten = mConnection.bulkTransfer(mWriteEndpoint, writeBuffer, writeLength,"
        errorLine2="                                             ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CdcAcmSerialDriver.java"
            line="308"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterfaceCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    for (int i = 0; i &lt; mDevice.getInterfaceCount(); i++) {"
        errorLine2="                                ~~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="94"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterfaceCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    for (int i = 0; i &lt; mDevice.getInterfaceCount(); i++) {"
        errorLine2="                                ~~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="94"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     UsbInterface usbIface = mDevice.getInterface(i);"
        errorLine2="                                     ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="95"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     UsbInterface usbIface = mDevice.getInterface(i);"
        errorLine2="                                     ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="95"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#claimInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     if (mConnection.claimInterface(usbIface, true)) {"
        errorLine2="                     ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="96"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#claimInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     if (mConnection.claimInterface(usbIface, true)) {"
        errorLine2="                     ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="96"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterfaceCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    UsbInterface dataIface = mDevice.getInterface(mDevice.getInterfaceCount() - 1);"
        errorLine2="                                                          ~~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="103"
            column="59"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    UsbInterface dataIface = mDevice.getInterface(mDevice.getInterfaceCount() - 1);"
        errorLine2="                                     ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="103"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    UsbInterface dataIface = mDevice.getInterface(mDevice.getInterfaceCount() - 1);"
        errorLine2="                                     ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="103"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterfaceCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    UsbInterface dataIface = mDevice.getInterface(mDevice.getInterfaceCount() - 1);"
        errorLine2="                                                          ~~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="103"
            column="59"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpointCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    for (int i = 0; i &lt; dataIface.getEndpointCount(); i++) {"
        errorLine2="                                  ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="104"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpointCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    for (int i = 0; i &lt; dataIface.getEndpointCount(); i++) {"
        errorLine2="                                  ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="104"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     UsbEndpoint ep = dataIface.getEndpoint(i);"
        errorLine2="                                ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="105"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     UsbEndpoint ep = dataIface.getEndpoint(i);"
        errorLine2="                                ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="105"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getType`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     if (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_BULK) {"
        errorLine2="            ~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="106"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getType"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     if (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_BULK) {"
        errorLine2="            ~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="106"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="      if (ep.getDirection() == UsbConstants.USB_DIR_IN) {"
        errorLine2="             ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="107"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getDirection"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="      if (ep.getDirection() == UsbConstants.USB_DIR_IN) {"
        errorLine2="             ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="107"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#close"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    mConnection.close();"
        errorLine2="                ~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="140"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    numBytesRead = mConnection.bulkTransfer(mReadEndpoint, mReadBuffer, readAmt,"
        errorLine2="                               ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="152"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    numBytesRead = mConnection.bulkTransfer(mReadEndpoint, mReadBuffer, readAmt,"
        errorLine2="                               ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="152"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     amtWritten = mConnection.bulkTransfer(mWriteEndpoint, writeBuffer, writeLength,"
        errorLine2="                              ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="186"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="     amtWritten = mConnection.bulkTransfer(mWriteEndpoint, writeBuffer, writeLength,"
        errorLine2="                              ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="186"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="   return mConnection.controlTransfer(REQTYPE_HOST_TO_DEVICE, request,"
        errorLine2="                      ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="202"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="   return mConnection.controlTransfer(REQTYPE_HOST_TO_DEVICE, request,"
        errorLine2="                      ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="202"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="   return mConnection.controlTransfer(REQTYPE_HOST_TO_DEVICE, request,"
        errorLine2="                      ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="209"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="   return mConnection.controlTransfer(REQTYPE_HOST_TO_DEVICE, request,"
        errorLine2="                      ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Ch34xSerialDriver.java"
            line="209"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getDeviceName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                getClass().getSimpleName(), mDevice.getDeviceName(),"
        errorLine2="                                                    ~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CommonUsbSerialPort.java"
            line="65"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getDeviceName"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                getClass().getSimpleName(), mDevice.getDeviceName(),"
        errorLine2="                                                    ~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CommonUsbSerialPort.java"
            line="65"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getDeviceId`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mDevice.getDeviceId(), mPortNumber);"
        errorLine2="                        ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CommonUsbSerialPort.java"
            line="66"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getDeviceId"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mDevice.getDeviceId(), mPortNumber);"
        errorLine2="                        ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CommonUsbSerialPort.java"
            line="66"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#getSerial"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mConnection.getSerial();"
        errorLine2="                           ~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\CommonUsbSerialPort.java"
            line="89"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return mConnection.controlTransfer(REQTYPE_HOST_TO_DEVICE, request, value,"
        errorLine2="                               ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="117"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return mConnection.controlTransfer(REQTYPE_HOST_TO_DEVICE, request, value,"
        errorLine2="                               ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="117"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterfaceCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                for (int i = 0; i &lt; mDevice.getInterfaceCount(); i++) {"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="130"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterfaceCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                for (int i = 0; i &lt; mDevice.getInterfaceCount(); i++) {"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="130"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    UsbInterface usbIface = mDevice.getInterface(i);"
        errorLine2="                                                    ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="131"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    UsbInterface usbIface = mDevice.getInterface(i);"
        errorLine2="                                                    ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="131"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#claimInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (mConnection.claimInterface(usbIface, true)) {"
        errorLine2="                                    ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="132"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#claimInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (mConnection.claimInterface(usbIface, true)) {"
        errorLine2="                                    ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="132"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterfaceCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                UsbInterface dataIface = mDevice.getInterface(mDevice.getInterfaceCount() - 1);"
        errorLine2="                                                                      ~~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="139"
            column="71"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                UsbInterface dataIface = mDevice.getInterface(mDevice.getInterfaceCount() - 1);"
        errorLine2="                                                 ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="139"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                UsbInterface dataIface = mDevice.getInterface(mDevice.getInterfaceCount() - 1);"
        errorLine2="                                                 ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="139"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterfaceCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                UsbInterface dataIface = mDevice.getInterface(mDevice.getInterfaceCount() - 1);"
        errorLine2="                                                                      ~~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="139"
            column="71"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpointCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                for (int i = 0; i &lt; dataIface.getEndpointCount(); i++) {"
        errorLine2="                                              ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="140"
            column="47"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpointCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                for (int i = 0; i &lt; dataIface.getEndpointCount(); i++) {"
        errorLine2="                                              ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="140"
            column="47"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    UsbEndpoint ep = dataIface.getEndpoint(i);"
        errorLine2="                                               ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="141"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    UsbEndpoint ep = dataIface.getEndpoint(i);"
        errorLine2="                                               ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="141"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getType`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_BULK) {"
        errorLine2="                           ~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="142"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getType"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (ep.getType() == UsbConstants.USB_ENDPOINT_XFER_BULK) {"
        errorLine2="                           ~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="142"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        if (ep.getDirection() == UsbConstants.USB_DIR_IN) {"
        errorLine2="                               ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="143"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getDirection"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        if (ep.getDirection() == UsbConstants.USB_DIR_IN) {"
        errorLine2="                               ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="143"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#close"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mConnection.close();"
        errorLine2="                            ~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="174"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                numBytesRead = mConnection.bulkTransfer(mReadEndpoint, mReadBuffer, readAmt,"
        errorLine2="                                           ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="185"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                numBytesRead = mConnection.bulkTransfer(mReadEndpoint, mReadBuffer, readAmt,"
        errorLine2="                                           ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="185"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    amtWritten = mConnection.bulkTransfer(mWriteEndpoint, writeBuffer, writeLength,"
        errorLine2="                                             ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="219"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    amtWritten = mConnection.bulkTransfer(mWriteEndpoint, writeBuffer, writeLength,"
        errorLine2="                                             ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="219"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int ret = mConnection.controlTransfer(REQTYPE_HOST_TO_DEVICE, SILABSER_SET_BAUDRATE,"
        errorLine2="                                  ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="240"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int ret = mConnection.controlTransfer(REQTYPE_HOST_TO_DEVICE, SILABSER_SET_BAUDRATE,"
        errorLine2="                                  ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\Cp21xxSerialDriver.java"
            line="240"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_RESET_REQUEST,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="231"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_RESET_REQUEST,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="231"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterfaceCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                for (int i = 0; i &lt; mDevice.getInterfaceCount(); i++) {"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="250"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterfaceCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                for (int i = 0; i &lt; mDevice.getInterfaceCount(); i++) {"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="250"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (connection.claimInterface(mDevice.getInterface(i), true)) {"
        errorLine2="                                                          ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="251"
            column="59"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#claimInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (connection.claimInterface(mDevice.getInterface(i), true)) {"
        errorLine2="                                   ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="251"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (connection.claimInterface(mDevice.getInterface(i), true)) {"
        errorLine2="                                                          ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="251"
            column="59"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#claimInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (connection.claimInterface(mDevice.getInterface(i), true)) {"
        errorLine2="                                   ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="251"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#close"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mConnection.close();"
        errorLine2="                            ~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="273"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final UsbEndpoint endpoint = mDevice.getInterface(0).getEndpoint(0);"
        errorLine2="                                                 ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="281"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final UsbEndpoint endpoint = mDevice.getInterface(0).getEndpoint(0);"
        errorLine2="                                                                 ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="281"
            column="66"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final UsbEndpoint endpoint = mDevice.getInterface(0).getEndpoint(0);"
        errorLine2="                                                 ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="281"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final UsbEndpoint endpoint = mDevice.getInterface(0).getEndpoint(0);"
        errorLine2="                                                                 ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="281"
            column="66"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): new android.hardware.usb.UsbRequest"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                final UsbRequest request = new UsbRequest();"
        errorLine2="                                           ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="290"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbRequest#initialize"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                request.initialize(mConnection, endpoint);"
        errorLine2="                        ~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="291"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbRequest#queue"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (!request.queue(buf, readAmt)) {"
        errorLine2="                             ~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="294"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#requestWait"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                final UsbRequest response = mConnection.requestWait();"
        errorLine2="                                                        ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="298"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    totalBytesRead = mConnection.bulkTransfer(endpoint, mReadBuffer,"
        errorLine2="                                                 ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="315"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    totalBytesRead = mConnection.bulkTransfer(endpoint, mReadBuffer,"
        errorLine2="                                                 ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="315"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getMaxPacketSize`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    return filterStatusBytes(mReadBuffer, dest, totalBytesRead, endpoint.getMaxPacketSize());"
        errorLine2="                                                                                         ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="322"
            column="90"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getMaxPacketSize"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    return filterStatusBytes(mReadBuffer, dest, totalBytesRead, endpoint.getMaxPacketSize());"
        errorLine2="                                                                                         ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="322"
            column="90"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final UsbEndpoint endpoint = mDevice.getInterface(0).getEndpoint(1);"
        errorLine2="                                                 ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="329"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final UsbEndpoint endpoint = mDevice.getInterface(0).getEndpoint(1);"
        errorLine2="                                                                 ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="329"
            column="66"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final UsbEndpoint endpoint = mDevice.getInterface(0).getEndpoint(1);"
        errorLine2="                                                 ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="329"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final UsbEndpoint endpoint = mDevice.getInterface(0).getEndpoint(1);"
        errorLine2="                                                                 ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="329"
            column="66"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    amtWritten = mConnection.bulkTransfer(endpoint, writeBuffer, writeLength,"
        errorLine2="                                             ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="348"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    amtWritten = mConnection.bulkTransfer(endpoint, writeBuffer, writeLength,"
        errorLine2="                                             ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="348"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="368"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="368"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="418"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="418"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_RESET_REQUEST,"
        errorLine2="                                         ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="553"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_RESET_REQUEST,"
        errorLine2="                                         ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="553"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_RESET_REQUEST,"
        errorLine2="                                         ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="561"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_RESET_REQUEST,"
        errorLine2="                                         ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\FtdiSerialDriver.java"
            line="561"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getDeviceName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                logger.debug(&quot;UsbDevice: &quot; + device.getDeviceName());"
        errorLine2="                                                    ~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="95"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getDeviceName"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                logger.debug(&quot;UsbDevice: &quot; + device.getDeviceName());"
        errorLine2="                                                    ~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="95"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getDeviceName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    logger.debug(&quot;UsbDevice: &quot; + device.getDeviceName());"
        errorLine2="                                                        ~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="107"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getDeviceName"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    logger.debug(&quot;UsbDevice: &quot; + device.getDeviceName());"
        errorLine2="                                                        ~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="107"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getDeviceName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (device.getDeviceName().equalsIgnoreCase(portName))"
        errorLine2="                               ~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="108"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getDeviceName"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if (device.getDeviceName().equalsIgnoreCase(portName))"
        errorLine2="                               ~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="108"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbManager#openDevice`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            UsbDeviceConnection connection = usbManager.openDevice(driver.getDevice());"
        errorLine2="                                                        ~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="119"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbManager#openDevice"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            UsbDeviceConnection connection = usbManager.openDevice(driver.getDevice());"
        errorLine2="                                                        ~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\HohoSerialPort.java"
            line="119"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(requestType, request, value,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="139"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(requestType, request, value,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="139"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#controlTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(requestType, request, value,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="152"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#controlTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int result = mConnection.controlTransfer(requestType, request, value,"
        errorLine2="                                     ~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="152"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    int readBytesCount = mConnection.bulkTransfer(mInterruptEndpoint,"
        errorLine2="                                                     ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="206"
            column="54"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    int readBytesCount = mConnection.bulkTransfer(mInterruptEndpoint,"
        errorLine2="                                                     ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="206"
            column="54"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        int readBytes = mConnection.bulkTransfer(mInterruptEndpoint,"
        errorLine2="                                                    ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="231"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        int readBytes = mConnection.bulkTransfer(mInterruptEndpoint,"
        errorLine2="                                                    ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="231"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            UsbInterface usbInterface = mDevice.getInterface(0);"
        errorLine2="                                                ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="273"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            UsbInterface usbInterface = mDevice.getInterface(0);"
        errorLine2="                                                ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="273"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#claimInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (!connection.claimInterface(usbInterface, true)) {"
        errorLine2="                            ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="275"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#claimInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (!connection.claimInterface(usbInterface, true)) {"
        errorLine2="                            ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="275"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpointCount`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                for (int i = 0; i &lt; usbInterface.getEndpointCount(); ++i) {"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="282"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpointCount"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                for (int i = 0; i &lt; usbInterface.getEndpointCount(); ++i) {"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="282"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbInterface#getEndpoint`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    UsbEndpoint currentEndpoint = usbInterface.getEndpoint(i);"
        errorLine2="                                                               ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="283"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbInterface#getEndpoint"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    UsbEndpoint currentEndpoint = usbInterface.getEndpoint(i);"
        errorLine2="                                                               ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="283"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbEndpoint#getAddress`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    switch (currentEndpoint.getAddress()) {"
        errorLine2="                                            ~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="285"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbEndpoint#getAddress"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    switch (currentEndpoint.getAddress()) {"
        errorLine2="                                            ~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="285"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getDeviceClass`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (mDevice.getDeviceClass() == 0x02) {"
        errorLine2="                            ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="300"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getDeviceClass"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (mDevice.getDeviceClass() == 0x02) {"
        errorLine2="                            ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="300"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getDeviceClass`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        } else if ((mDevice.getDeviceClass() == 0x00)"
        errorLine2="                                            ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="311"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getDeviceClass"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        } else if ((mDevice.getDeviceClass() == 0x00)"
        errorLine2="                                            ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="311"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getDeviceClass`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                || (mDevice.getDeviceClass() == 0xff)) {"
        errorLine2="                                            ~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="312"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getDeviceClass"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                || (mDevice.getDeviceClass() == 0xff)) {"
        errorLine2="                                            ~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="312"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#releaseInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    connection.releaseInterface(usbInterface);"
        errorLine2="                               ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="338"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#releaseInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    connection.releaseInterface(usbInterface);"
        errorLine2="                               ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="338"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mConnection.releaseInterface(mDevice.getInterface(0));"
        errorLine2="                                                         ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="362"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#releaseInterface`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mConnection.releaseInterface(mDevice.getInterface(0));"
        errorLine2="                                ~~~~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="362"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mConnection.releaseInterface(mDevice.getInterface(0));"
        errorLine2="                                                         ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="362"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#releaseInterface"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mConnection.releaseInterface(mDevice.getInterface(0));"
        errorLine2="                                ~~~~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="362"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                int numBytesRead = mConnection.bulkTransfer(mReadEndpoint, mReadBuffer,"
        errorLine2="                                               ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="373"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                int numBytesRead = mConnection.bulkTransfer(mReadEndpoint, mReadBuffer,"
        errorLine2="                                               ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="373"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDeviceConnection#bulkTransfer`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    amtWritten = mConnection.bulkTransfer(mWriteEndpoint,"
        errorLine2="                                             ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="403"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDeviceConnection#bulkTransfer"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    amtWritten = mConnection.bulkTransfer(mWriteEndpoint,"
        errorLine2="                                             ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\ProlificSerialDriver.java"
            line="403"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbManager#getDeviceList`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        for (final UsbDevice usbDevice : usbManager.getDeviceList().values()) {"
        errorLine2="                                                    ~~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\UsbSerialProber.java"
            line="70"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbManager#getDeviceList"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        for (final UsbDevice usbDevice : usbManager.getDeviceList().values()) {"
        errorLine2="                                                    ~~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\UsbSerialProber.java"
            line="70"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getVendorId`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        final int vendorId = usbDevice.getVendorId();"
        errorLine2="                                       ~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\UsbSerialProber.java"
            line="87"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getVendorId"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        final int vendorId = usbDevice.getVendorId();"
        errorLine2="                                       ~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\UsbSerialProber.java"
            line="87"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice#getProductId`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        final int productId = usbDevice.getProductId();"
        errorLine2="                                        ~~~~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\UsbSerialProber.java"
            line="88"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 12 (current min is 10): android.hardware.usb.UsbDevice#getProductId"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        final int productId = usbDevice.getProductId();"
        errorLine2="                                        ~~~~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\UsbSerialProber.java"
            line="88"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 12 (current min is 10): `android.hardware.usb.UsbDevice`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        driverClass.getConstructor(UsbDevice.class);"
        errorLine2="                                                   ~~~~~~~~~"
        includedVariants="release"
        excludedVariants="debug"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\UsbSerialProber.java"
            line="96"
            column="52"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 12 (current min is 10): android.hardware.usb.UsbDevice"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        driverClass.getConstructor(UsbDevice.class);"
        errorLine2="                                                   ~~~~~~~~~"
        includedVariants="debug"
        excludedVariants="release"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\hoho\android\usbserial\driver\UsbSerialProber.java"
            line="96"
            column="52"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 25"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\build.gradle"
            line="14"
            column="9"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="            DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\table\CsvTablesWriter.java"
            line="52"
            column="37"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="            SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd.MM.yyyy HH:mm:ss.SSS&quot;);"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\FileLogger.java"
            line="71"
            column="36"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat timeFormat = new SimpleDateFormat(&quot;HH:mm&quot;);"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\FiscalPrinterImpl.java"
            line="2215"
            column="39"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="            SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd.MM.yyyy HH:mm:ss.SSS&quot;);"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\Logger.java"
            line="87"
            column="36"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                SimpleDateFormat dateFormat = new SimpleDateFormat("
        errorLine2="                                              ^">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\ZeroPriceFilter.java"
            line="66"
            column="47"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:support-annotations than 25.1.0 is available: 25.3.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    androidTestCompile &apos;com.android.support:support-annotations:25.1.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\build.gradle"
            line="88"
            column="5"/>
    </issue>

    <issue
        id="SwitchIntDef"
        severity="Warning"
        message="Switch statement on an `int` with known associated constant missing case `BluetoothAdapter.STATE_OFF`, `BluetoothAdapter.STATE_ON`"
        category="Correctness"
        priority="3"
        summary="Missing @IntDef in Switch"
        explanation="This check warns if a `switch` statement does not explicitly include all the values declared by the typedef `@IntDef` declaration."
        errorLine1="   switch (adapter.getState()) {"
        errorLine2="   ~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\BluetoothPort.java"
            line="105"
            column="4"/>
    </issue>

    <issue
        id="HardwareIds"
        severity="Warning"
        message="Using `getAddress` to get device identifiers is not recommended."
        category="Security"
        priority="6"
        summary="Hardware Id Usage"
        explanation="Using these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use `AdvertisingIdClient$Info#getId` and for analytics, use `InstanceId#getId`."
        url="https://developer.android.com/training/articles/user-data-ids.html"
        urls="https://developer.android.com/training/articles/user-data-ids.html"
        errorLine1="  result.add(BluetoothAdapter.getDefaultAdapter().getAddress());"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\port\BluetoothPort.java"
            line="265"
            column="14"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts."
        errorLine1=" private static Context context = null;"
        errorLine2=" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\StaticContext.java"
            line="9"
            column="2"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use `new SparseArray&lt;FlexCommand>(...)` instead for better performance"
        category="Performance"
        priority="4"
        summary="HashMap can be replaced with SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.&#xA;&#xA;This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.&#xA;&#xA;If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1="    private final HashMap&lt;Integer, FlexCommand> list = new HashMap&lt;Integer, FlexCommand>();"
        errorLine2="                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\FlexCommands.java"
            line="20"
            column="56"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(ShtrihCashDrawerConst.SMCASH_DIO_GET_DRIVER_PARAMETER)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        dioItems.put(new Integer("
        errorLine2="                     ^"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\cashdrawer\CashDrawerImpl.java"
            line="102"
            column="22"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(ShtrihCashDrawerConst.SMCASH_DIO_SET_DRIVER_PARAMETER)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        dioItems.put(new Integer("
        errorLine2="                     ^"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\cashdrawer\CashDrawerImpl.java"
            line="106"
            column="22"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(ShtrihCashDrawerConst.SMCASH_DIO_OPEN_DRAWER)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        dioItems.put(new Integer(ShtrihCashDrawerConst.SMCASH_DIO_OPEN_DRAWER),"
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\cashdrawer\CashDrawerImpl.java"
            line="110"
            column="22"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(ShtrihCashDrawerConst.SMCASH_DIO_READ_DRAWER_STATE)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        dioItems.put(new Integer("
        errorLine2="                     ^"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\cashdrawer\CashDrawerImpl.java"
            line="113"
            column="22"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(command)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="                    .get(new Integer(command));"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\cashdrawer\CashDrawerImpl.java"
            line="405"
            column="26"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Long.valueOf(totals.getSalesAmount())` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        outParams[0] = new Long(totals.getSalesAmount());"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\directIO\DIOReadTotals.java"
            line="32"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Long.valueOf(totals.getBuyAmount())` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        outParams[1] = new Long(totals.getBuyAmount());"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\directIO\DIOReadTotals.java"
            line="33"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Long.valueOf(totals.getRetSaleAmount())` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        outParams[2] = new Long(totals.getRetSaleAmount());"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\directIO\DIOReadTotals.java"
            line="34"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Long.valueOf(totals.getRetBuyAmount())` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        outParams[3] = new Long(totals.getRetBuyAmount());"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\directIO\DIOReadTotals.java"
            line="35"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(value)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="            long fieldValueLong = new Integer(value).longValue();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\FieldInfo.java"
            line="74"
            column="35"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(value)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        long fieldValueLong = new Integer(value).longValue();"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\FieldInfo.java"
            line="84"
            column="31"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(((b) &lt;&lt; 24) >>> 24)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer I = new Integer(((b) &lt;&lt; 24) >>> 24);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\util\Hex.java"
            line="238"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(result)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="                return new Integer(result);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\command\ParameterValues.java"
            line="45"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_MONITOR)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_MONITOR), &quot;FPTR_PS_MONITOR&quot;);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="29"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_FISCAL_RECEIPT)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_FISCAL_RECEIPT), &quot;FPTR_PS_FISCAL_RECEIPT&quot;);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="30"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_FISCAL_RECEIPT_TOTAL)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_FISCAL_RECEIPT_TOTAL),"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="31"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_FISCAL_RECEIPT_ENDING)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_FISCAL_RECEIPT_ENDING),"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="33"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_FISCAL_DOCUMENT)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_FISCAL_DOCUMENT), &quot;FPTR_PS_FISCAL_DOCUMENT&quot;);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="35"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_FIXED_OUTPUT)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_FIXED_OUTPUT), &quot;FPTR_PS_FIXED_OUTPUT&quot;);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="36"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_ITEM_LIST)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_ITEM_LIST), &quot;FPTR_PS_ITEM_LIST&quot;);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="37"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_LOCKED)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_LOCKED), &quot;FPTR_PS_LOCKED&quot;);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="38"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_NONFISCAL)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_NONFISCAL), &quot;FPTR_PS_NONFISCAL&quot;);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="39"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(FPTR_PS_REPORT)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        m.put(new Integer(FPTR_PS_REPORT), &quot;FPTR_PS_REPORT&quot;);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="40"
            column="15"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(state)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        String result = (String) m.get(new Integer(state));"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\PrinterState.java"
            line="42"
            column="40"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(barcodeType)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[2] = new Integer(barcodeType); // barcode type"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1199"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(barcodeHeight)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[3] = new Integer(barcodeHeight); // barcode height in pixels"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1200"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(printType)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[4] = new Integer(printType); // print type"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1201"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(barWidth)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[5] = new Integer(barWidth); // barcode bar width in pixels"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1202"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(textPosition)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[6] = new Integer(textPosition); // text position"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1203"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(textFont)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[7] = new Integer(textFont); // text font"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1204"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(aspectRatio)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[8] = new Integer(aspectRatio); // narrow to width ratio, 3 by default"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1205"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(operation)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[0] = new Integer(operation);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1603"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Long.valueOf(amount)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        params[1] = new Long(amount);"
        errorLine2="                    ~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1604"
            column="21"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(amount)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="                new Integer(amount));"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\fiscalprinter\ShtrihFiscalPrinter113.java"
            line="1849"
            column="17"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(image.getHeight())` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="  addParameter(imageNode, &quot;Height&quot;, new Integer(image.getHeight()));"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\XmlPropWriter.java"
            line="66"
            column="37"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(image.getStartPos())` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="  addParameter(imageNode, &quot;FirstLine&quot;, new Integer(image.getStartPos()));"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\XmlPropWriter.java"
            line="67"
            column="40"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(image.getImageIndex())` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="    new Integer(image.getImageIndex()));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\XmlPropWriter.java"
            line="85"
            column="5"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(image.getPosition())` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="  addParameter(imageNode, &quot;Position&quot;, new Integer(image.getPosition()));"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\jpos\fiscalprinter\XmlPropWriter.java"
            line="86"
            column="39"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(0)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="            hints.put(EncodeHintType.MARGIN, new Integer(0));"
        errorLine2="                                             ~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\mamba\AndroidStudioProjects\ShtrihPrinterLibrary\FptrServiceAndroid\src\com\shtrih\barcode\ZXingEncoder.java"
            line="81"
            column="46"/>
    </issue>

</issues>
